/* tslint:disable */
/* eslint-disable */
/**
 * 당근 미니 게임 API 문서
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface BaseResponseListTownRankingDto
 */
export interface BaseResponseListTownRankingDto {
    /**
     * 
     * @type {Array<TownRankingDto>}
     * @memberof BaseResponseListTownRankingDto
     */
    'data'?: Array<TownRankingDto>;
    /**
     * 
     * @type {string}
     * @memberof BaseResponseListTownRankingDto
     */
    'message'?: string;
    /**
     * 
     * @type {number}
     * @memberof BaseResponseListTownRankingDto
     */
    'status': number;
    /**
     * 
     * @type {string}
     * @memberof BaseResponseListTownRankingDto
     */
    'timestamp': string;
}
/**
 * 
 * @export
 * @interface BaseResponseListobject
 */
export interface BaseResponseListobject {
    /**
     * 
     * @type {Array<object>}
     * @memberof BaseResponseListobject
     */
    'data'?: Array<object>;
    /**
     * 
     * @type {string}
     * @memberof BaseResponseListobject
     */
    'message'?: string;
    /**
     * 
     * @type {number}
     * @memberof BaseResponseListobject
     */
    'status': number;
    /**
     * 
     * @type {string}
     * @memberof BaseResponseListobject
     */
    'timestamp': string;
}
/**
 * 
 * @export
 * @interface BaseResponseRankingDto
 */
export interface BaseResponseRankingDto {
    /**
     * 
     * @type {RankingDto}
     * @memberof BaseResponseRankingDto
     */
    'data'?: RankingDto;
    /**
     * 
     * @type {string}
     * @memberof BaseResponseRankingDto
     */
    'message'?: string;
    /**
     * 
     * @type {number}
     * @memberof BaseResponseRankingDto
     */
    'status': number;
    /**
     * 
     * @type {string}
     * @memberof BaseResponseRankingDto
     */
    'timestamp': string;
}
/**
 * 
 * @export
 * @interface BaseResponseTokenDto
 */
export interface BaseResponseTokenDto {
    /**
     * 
     * @type {TokenDto}
     * @memberof BaseResponseTokenDto
     */
    'data'?: TokenDto;
    /**
     * 
     * @type {string}
     * @memberof BaseResponseTokenDto
     */
    'message'?: string;
    /**
     * 
     * @type {number}
     * @memberof BaseResponseTokenDto
     */
    'status': number;
    /**
     * 
     * @type {string}
     * @memberof BaseResponseTokenDto
     */
    'timestamp': string;
}
/**
 * 
 * @export
 * @interface BaseResponseTownDto
 */
export interface BaseResponseTownDto {
    /**
     * 
     * @type {TownDto}
     * @memberof BaseResponseTownDto
     */
    'data'?: TownDto;
    /**
     * 
     * @type {string}
     * @memberof BaseResponseTownDto
     */
    'message'?: string;
    /**
     * 
     * @type {number}
     * @memberof BaseResponseTownDto
     */
    'status': number;
    /**
     * 
     * @type {string}
     * @memberof BaseResponseTownDto
     */
    'timestamp': string;
}
/**
 * 
 * @export
 * @interface BaseResponseUnit
 */
export interface BaseResponseUnit {
    /**
     * 
     * @type {object}
     * @memberof BaseResponseUnit
     */
    'data'?: object;
    /**
     * 
     * @type {string}
     * @memberof BaseResponseUnit
     */
    'message'?: string;
    /**
     * 
     * @type {number}
     * @memberof BaseResponseUnit
     */
    'status': number;
    /**
     * 
     * @type {string}
     * @memberof BaseResponseUnit
     */
    'timestamp': string;
}
/**
 * 
 * @export
 * @interface BaseResponseUserDto
 */
export interface BaseResponseUserDto {
    /**
     * 
     * @type {UserDto}
     * @memberof BaseResponseUserDto
     */
    'data'?: UserDto;
    /**
     * 
     * @type {string}
     * @memberof BaseResponseUserDto
     */
    'message'?: string;
    /**
     * 
     * @type {number}
     * @memberof BaseResponseUserDto
     */
    'status': number;
    /**
     * 
     * @type {string}
     * @memberof BaseResponseUserDto
     */
    'timestamp': string;
}
/**
 * 
 * @export
 * @interface BaseResponseint
 */
export interface BaseResponseint {
    /**
     * 
     * @type {number}
     * @memberof BaseResponseint
     */
    'data'?: number;
    /**
     * 
     * @type {string}
     * @memberof BaseResponseint
     */
    'message'?: string;
    /**
     * 
     * @type {number}
     * @memberof BaseResponseint
     */
    'status': number;
    /**
     * 
     * @type {string}
     * @memberof BaseResponseint
     */
    'timestamp': string;
}
/**
 * 
 * @export
 * @interface BaseResponselong
 */
export interface BaseResponselong {
    /**
     * 
     * @type {number}
     * @memberof BaseResponselong
     */
    'data'?: number;
    /**
     * 
     * @type {string}
     * @memberof BaseResponselong
     */
    'message'?: string;
    /**
     * 
     * @type {number}
     * @memberof BaseResponselong
     */
    'status': number;
    /**
     * 
     * @type {string}
     * @memberof BaseResponselong
     */
    'timestamp': string;
}
/**
 * 
 * @export
 * @interface CommentRequestDto
 */
export interface CommentRequestDto {
    /**
     * 
     * @type {string}
     * @memberof CommentRequestDto
     */
    'comment': string;
}
/**
 * 
 * @export
 * @interface KarrotCodeRequestDto
 */
export interface KarrotCodeRequestDto {
    /**
     * 
     * @type {string}
     * @memberof KarrotCodeRequestDto
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof KarrotCodeRequestDto
     */
    'regionId': string;
}
/**
 * 
 * @export
 * @interface RankingDto
 */
export interface RankingDto {
    /**
     * 
     * @type {string}
     * @memberof RankingDto
     */
    'comment'?: string;
    /**
     * 순위(게임을 하지 않은 경우 => 0)
     * @type {number}
     * @memberof RankingDto
     */
    'rank'?: number;
    /**
     * 점수(게임을 하지 않은 경우 => 0)
     * @type {number}
     * @memberof RankingDto
     */
    'score'?: number;
}
/**
 * 
 * @export
 * @interface ScoreRequestDto
 */
export interface ScoreRequestDto {
    /**
     * 
     * @type {number}
     * @memberof ScoreRequestDto
     */
    'score'?: number;
}
/**
 * 
 * @export
 * @interface TokenDto
 */
export interface TokenDto {
    /**
     * 
     * @type {string}
     * @memberof TokenDto
     */
    'accessToken': string;
}
/**
 * 
 * @export
 * @interface TownDto
 */
export interface TownDto {
    /**
     * 
     * @type {string}
     * @memberof TownDto
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof TownDto
     */
    'name1': string;
    /**
     * 
     * @type {string}
     * @memberof TownDto
     */
    'name2': string;
}
/**
 * 
 * @export
 * @interface TownRankingDto
 */
export interface TownRankingDto {
    /**
     * 
     * @type {string}
     * @memberof TownRankingDto
     */
    'name1': string;
    /**
     * 
     * @type {string}
     * @memberof TownRankingDto
     */
    'name2': string;
    /**
     * 
     * @type {number}
     * @memberof TownRankingDto
     */
    'playerCount'?: number;
    /**
     * 
     * @type {number}
     * @memberof TownRankingDto
     */
    'score': number;
}
/**
 * 
 * @export
 * @interface UserDto
 */
export interface UserDto {
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'nickname': string;
    /**
     * 
     * @type {TownDto}
     * @memberof UserDto
     */
    'town': TownDto;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary demandTown
         * @param {string} [authority] 
         * @param {string} [createdAt] 
         * @param {string} [id] 
         * @param {string} [nickname] 
         * @param {string} [regionId] 
         * @param {string} [townId] 
         * @param {string} [townName1] 
         * @param {string} [townName2] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        demandTownUsingPOST: async (authority?: string, createdAt?: string, id?: string, nickname?: string, regionId?: string, townId?: string, townName1?: string, townName2?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/demand`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (authority !== undefined) {
                localVarQueryParameter['authority'] = authority;
            }

            if (createdAt !== undefined) {
                localVarQueryParameter['createdAt'] = (createdAt as any instanceof Date) ?
                    (createdAt as any).toISOString() :
                    createdAt;
            }

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            if (nickname !== undefined) {
                localVarQueryParameter['nickname'] = nickname;
            }

            if (regionId !== undefined) {
                localVarQueryParameter['regionId'] = regionId;
            }

            if (townId !== undefined) {
                localVarQueryParameter['town.id'] = townId;
            }

            if (townName1 !== undefined) {
                localVarQueryParameter['town.name1'] = townName1;
            }

            if (townName2 !== undefined) {
                localVarQueryParameter['town.name2'] = townName2;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary demandTown
         * @param {string} [authority] 
         * @param {string} [createdAt] 
         * @param {string} [id] 
         * @param {string} [nickname] 
         * @param {string} [regionId] 
         * @param {string} [townId] 
         * @param {string} [townName1] 
         * @param {string} [townName2] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async demandTownUsingPOST(authority?: string, createdAt?: string, id?: string, nickname?: string, regionId?: string, townId?: string, townName1?: string, townName2?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResponseUnit>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.demandTownUsingPOST(authority, createdAt, id, nickname, regionId, townId, townName1, townName2, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary demandTown
         * @param {string} [authority] 
         * @param {string} [createdAt] 
         * @param {string} [id] 
         * @param {string} [nickname] 
         * @param {string} [regionId] 
         * @param {string} [townId] 
         * @param {string} [townName1] 
         * @param {string} [townName2] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        demandTownUsingPOST(authority?: string, createdAt?: string, id?: string, nickname?: string, regionId?: string, townId?: string, townName1?: string, townName2?: string, options?: any): AxiosPromise<BaseResponseUnit> {
            return localVarFp.demandTownUsingPOST(authority, createdAt, id, nickname, regionId, townId, townName1, townName2, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary demandTown
     * @param {string} [authority] 
     * @param {string} [createdAt] 
     * @param {string} [id] 
     * @param {string} [nickname] 
     * @param {string} [regionId] 
     * @param {string} [townId] 
     * @param {string} [townName1] 
     * @param {string} [townName2] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public demandTownUsingPOST(authority?: string, createdAt?: string, id?: string, nickname?: string, regionId?: string, townId?: string, townName1?: string, townName2?: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).demandTownUsingPOST(authority, createdAt, id, nickname, regionId, townId, townName1, townName2, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * GamePlayApi - axios parameter creator
 * @export
 */
export const GamePlayApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 한마디 추가
         * @param {'GAME_KARROT' | 'GAME_2048'} gameType gameType
         * @param {CommentRequestDto} requestDto requestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCommentUsingPATCH: async (gameType: 'GAME_KARROT' | 'GAME_2048', requestDto: CommentRequestDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'gameType' is not null or undefined
            assertParamExists('addCommentUsingPATCH', 'gameType', gameType)
            // verify required parameter 'requestDto' is not null or undefined
            assertParamExists('addCommentUsingPATCH', 'requestDto', requestDto)
            const localVarPath = `/api/games/{gameType}/comment`
                .replace(`{${"gameType"}}`, encodeURIComponent(String(gameType)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 스코어 갱신
         * @param {'GAME_KARROT' | 'GAME_2048'} gameType gameType
         * @param {ScoreRequestDto} requestDto requestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateScoreUsingPATCH: async (gameType: 'GAME_KARROT' | 'GAME_2048', requestDto: ScoreRequestDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'gameType' is not null or undefined
            assertParamExists('updateScoreUsingPATCH', 'gameType', gameType)
            // verify required parameter 'requestDto' is not null or undefined
            assertParamExists('updateScoreUsingPATCH', 'requestDto', requestDto)
            const localVarPath = `/api/games/{gameType}/score`
                .replace(`{${"gameType"}}`, encodeURIComponent(String(gameType)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GamePlayApi - functional programming interface
 * @export
 */
export const GamePlayApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GamePlayApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 한마디 추가
         * @param {'GAME_KARROT' | 'GAME_2048'} gameType gameType
         * @param {CommentRequestDto} requestDto requestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addCommentUsingPATCH(gameType: 'GAME_KARROT' | 'GAME_2048', requestDto: CommentRequestDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResponseUnit>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addCommentUsingPATCH(gameType, requestDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 스코어 갱신
         * @param {'GAME_KARROT' | 'GAME_2048'} gameType gameType
         * @param {ScoreRequestDto} requestDto requestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateScoreUsingPATCH(gameType: 'GAME_KARROT' | 'GAME_2048', requestDto: ScoreRequestDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResponseUnit>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateScoreUsingPATCH(gameType, requestDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * GamePlayApi - factory interface
 * @export
 */
export const GamePlayApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GamePlayApiFp(configuration)
    return {
        /**
         * 
         * @summary 한마디 추가
         * @param {'GAME_KARROT' | 'GAME_2048'} gameType gameType
         * @param {CommentRequestDto} requestDto requestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCommentUsingPATCH(gameType: 'GAME_KARROT' | 'GAME_2048', requestDto: CommentRequestDto, options?: any): AxiosPromise<BaseResponseUnit> {
            return localVarFp.addCommentUsingPATCH(gameType, requestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 스코어 갱신
         * @param {'GAME_KARROT' | 'GAME_2048'} gameType gameType
         * @param {ScoreRequestDto} requestDto requestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateScoreUsingPATCH(gameType: 'GAME_KARROT' | 'GAME_2048', requestDto: ScoreRequestDto, options?: any): AxiosPromise<BaseResponseUnit> {
            return localVarFp.updateScoreUsingPATCH(gameType, requestDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GamePlayApi - object-oriented interface
 * @export
 * @class GamePlayApi
 * @extends {BaseAPI}
 */
export class GamePlayApi extends BaseAPI {
    /**
     * 
     * @summary 한마디 추가
     * @param {'GAME_KARROT' | 'GAME_2048'} gameType gameType
     * @param {CommentRequestDto} requestDto requestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GamePlayApi
     */
    public addCommentUsingPATCH(gameType: 'GAME_KARROT' | 'GAME_2048', requestDto: CommentRequestDto, options?: AxiosRequestConfig) {
        return GamePlayApiFp(this.configuration).addCommentUsingPATCH(gameType, requestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 스코어 갱신
     * @param {'GAME_KARROT' | 'GAME_2048'} gameType gameType
     * @param {ScoreRequestDto} requestDto requestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GamePlayApi
     */
    public updateScoreUsingPATCH(gameType: 'GAME_KARROT' | 'GAME_2048', requestDto: ScoreRequestDto, options?: AxiosRequestConfig) {
        return GamePlayApiFp(this.configuration).updateScoreUsingPATCH(gameType, requestDto, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * GameTownApi - axios parameter creator
 * @export
 */
export const GameTownApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 동네 리더보드 조회
         * @param {'GAME_KARROT' | 'GAME_2048'} gameType gameType
         * @param {number} [month] month
         * @param {number} [size] size
         * @param {number} [week] week
         * @param {number} [year] year
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLeaderBoardByTownUsingGET: async (gameType: 'GAME_KARROT' | 'GAME_2048', month?: number, size?: number, week?: number, year?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'gameType' is not null or undefined
            assertParamExists('getLeaderBoardByTownUsingGET', 'gameType', gameType)
            const localVarPath = `/api/games/{gameType}/towns/leaderboard`
                .replace(`{${"gameType"}}`, encodeURIComponent(String(gameType)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (month !== undefined) {
                localVarQueryParameter['month'] = month;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (week !== undefined) {
                localVarQueryParameter['week'] = week;
            }

            if (year !== undefined) {
                localVarQueryParameter['year'] = year;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GameTownApi - functional programming interface
 * @export
 */
export const GameTownApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GameTownApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 동네 리더보드 조회
         * @param {'GAME_KARROT' | 'GAME_2048'} gameType gameType
         * @param {number} [month] month
         * @param {number} [size] size
         * @param {number} [week] week
         * @param {number} [year] year
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLeaderBoardByTownUsingGET(gameType: 'GAME_KARROT' | 'GAME_2048', month?: number, size?: number, week?: number, year?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResponseListTownRankingDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLeaderBoardByTownUsingGET(gameType, month, size, week, year, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * GameTownApi - factory interface
 * @export
 */
export const GameTownApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GameTownApiFp(configuration)
    return {
        /**
         * 
         * @summary 동네 리더보드 조회
         * @param {'GAME_KARROT' | 'GAME_2048'} gameType gameType
         * @param {number} [month] month
         * @param {number} [size] size
         * @param {number} [week] week
         * @param {number} [year] year
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLeaderBoardByTownUsingGET(gameType: 'GAME_KARROT' | 'GAME_2048', month?: number, size?: number, week?: number, year?: number, options?: any): AxiosPromise<BaseResponseListTownRankingDto> {
            return localVarFp.getLeaderBoardByTownUsingGET(gameType, month, size, week, year, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GameTownApi - object-oriented interface
 * @export
 * @class GameTownApi
 * @extends {BaseAPI}
 */
export class GameTownApi extends BaseAPI {
    /**
     * 
     * @summary 동네 리더보드 조회
     * @param {'GAME_KARROT' | 'GAME_2048'} gameType gameType
     * @param {number} [month] month
     * @param {number} [size] size
     * @param {number} [week] week
     * @param {number} [year] year
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GameTownApi
     */
    public getLeaderBoardByTownUsingGET(gameType: 'GAME_KARROT' | 'GAME_2048', month?: number, size?: number, week?: number, year?: number, options?: AxiosRequestConfig) {
        return GameTownApiFp(this.configuration).getLeaderBoardByTownUsingGET(gameType, month, size, week, year, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * GameUserApi - axios parameter creator
 * @export
 */
export const GameUserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 유저 리더보드 조회
         * @param {'GAME_KARROT' | 'GAME_2048'} gameType gameType
         * @param {number} [month] month
         * @param {number} [size] size
         * @param {number} [week] week
         * @param {number} [year] year
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLeaderBoardByUserUsingGET: async (gameType: 'GAME_KARROT' | 'GAME_2048', month?: number, size?: number, week?: number, year?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'gameType' is not null or undefined
            assertParamExists('getLeaderBoardByUserUsingGET', 'gameType', gameType)
            const localVarPath = `/api/games/{gameType}/users/leaderboard`
                .replace(`{${"gameType"}}`, encodeURIComponent(String(gameType)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (month !== undefined) {
                localVarQueryParameter['month'] = month;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (week !== undefined) {
                localVarQueryParameter['week'] = week;
            }

            if (year !== undefined) {
                localVarQueryParameter['year'] = year;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 내 현재/최고 랭킹(점수) 정보 조회
         * @param {'GAME_KARROT' | 'GAME_2048'} gameType gameType
         * @param {'BEST' | 'CURRENT'} [type] type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyRankInfoUsingGET: async (gameType: 'GAME_KARROT' | 'GAME_2048', type?: 'BEST' | 'CURRENT', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'gameType' is not null or undefined
            assertParamExists('getMyRankInfoUsingGET', 'gameType', gameType)
            const localVarPath = `/api/games/{gameType}/users/me/ranking`
                .replace(`{${"gameType"}}`, encodeURIComponent(String(gameType)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 48시간 내에 플레이한 유저 수
         * @param {'GAME_KARROT' | 'GAME_2048'} gameType gameType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserCountByDailyUsingGET: async (gameType: 'GAME_KARROT' | 'GAME_2048', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'gameType' is not null or undefined
            assertParamExists('getUserCountByDailyUsingGET', 'gameType', gameType)
            const localVarPath = `/api/games/{gameType}/users/daily-count`
                .replace(`{${"gameType"}}`, encodeURIComponent(String(gameType)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GameUserApi - functional programming interface
 * @export
 */
export const GameUserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GameUserApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 유저 리더보드 조회
         * @param {'GAME_KARROT' | 'GAME_2048'} gameType gameType
         * @param {number} [month] month
         * @param {number} [size] size
         * @param {number} [week] week
         * @param {number} [year] year
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLeaderBoardByUserUsingGET(gameType: 'GAME_KARROT' | 'GAME_2048', month?: number, size?: number, week?: number, year?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResponseListobject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLeaderBoardByUserUsingGET(gameType, month, size, week, year, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 내 현재/최고 랭킹(점수) 정보 조회
         * @param {'GAME_KARROT' | 'GAME_2048'} gameType gameType
         * @param {'BEST' | 'CURRENT'} [type] type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMyRankInfoUsingGET(gameType: 'GAME_KARROT' | 'GAME_2048', type?: 'BEST' | 'CURRENT', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResponseRankingDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMyRankInfoUsingGET(gameType, type, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 48시간 내에 플레이한 유저 수
         * @param {'GAME_KARROT' | 'GAME_2048'} gameType gameType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserCountByDailyUsingGET(gameType: 'GAME_KARROT' | 'GAME_2048', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResponseint>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserCountByDailyUsingGET(gameType, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * GameUserApi - factory interface
 * @export
 */
export const GameUserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GameUserApiFp(configuration)
    return {
        /**
         * 
         * @summary 유저 리더보드 조회
         * @param {'GAME_KARROT' | 'GAME_2048'} gameType gameType
         * @param {number} [month] month
         * @param {number} [size] size
         * @param {number} [week] week
         * @param {number} [year] year
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLeaderBoardByUserUsingGET(gameType: 'GAME_KARROT' | 'GAME_2048', month?: number, size?: number, week?: number, year?: number, options?: any): AxiosPromise<BaseResponseListobject> {
            return localVarFp.getLeaderBoardByUserUsingGET(gameType, month, size, week, year, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 내 현재/최고 랭킹(점수) 정보 조회
         * @param {'GAME_KARROT' | 'GAME_2048'} gameType gameType
         * @param {'BEST' | 'CURRENT'} [type] type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyRankInfoUsingGET(gameType: 'GAME_KARROT' | 'GAME_2048', type?: 'BEST' | 'CURRENT', options?: any): AxiosPromise<BaseResponseRankingDto> {
            return localVarFp.getMyRankInfoUsingGET(gameType, type, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 48시간 내에 플레이한 유저 수
         * @param {'GAME_KARROT' | 'GAME_2048'} gameType gameType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserCountByDailyUsingGET(gameType: 'GAME_KARROT' | 'GAME_2048', options?: any): AxiosPromise<BaseResponseint> {
            return localVarFp.getUserCountByDailyUsingGET(gameType, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GameUserApi - object-oriented interface
 * @export
 * @class GameUserApi
 * @extends {BaseAPI}
 */
export class GameUserApi extends BaseAPI {
    /**
     * 
     * @summary 유저 리더보드 조회
     * @param {'GAME_KARROT' | 'GAME_2048'} gameType gameType
     * @param {number} [month] month
     * @param {number} [size] size
     * @param {number} [week] week
     * @param {number} [year] year
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GameUserApi
     */
    public getLeaderBoardByUserUsingGET(gameType: 'GAME_KARROT' | 'GAME_2048', month?: number, size?: number, week?: number, year?: number, options?: AxiosRequestConfig) {
        return GameUserApiFp(this.configuration).getLeaderBoardByUserUsingGET(gameType, month, size, week, year, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 내 현재/최고 랭킹(점수) 정보 조회
     * @param {'GAME_KARROT' | 'GAME_2048'} gameType gameType
     * @param {'BEST' | 'CURRENT'} [type] type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GameUserApi
     */
    public getMyRankInfoUsingGET(gameType: 'GAME_KARROT' | 'GAME_2048', type?: 'BEST' | 'CURRENT', options?: AxiosRequestConfig) {
        return GameUserApiFp(this.configuration).getMyRankInfoUsingGET(gameType, type, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 48시간 내에 플레이한 유저 수
     * @param {'GAME_KARROT' | 'GAME_2048'} gameType gameType
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GameUserApi
     */
    public getUserCountByDailyUsingGET(gameType: 'GAME_KARROT' | 'GAME_2048', options?: AxiosRequestConfig) {
        return GameUserApiFp(this.configuration).getUserCountByDailyUsingGET(gameType, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * Oauth2Api - axios parameter creator
 * @export
 */
export const Oauth2ApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 당근 Oauth2
         * @param {KarrotCodeRequestDto} requestDto requestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        karrotLoginUsingPOST: async (requestDto: KarrotCodeRequestDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestDto' is not null or undefined
            assertParamExists('karrotLoginUsingPOST', 'requestDto', requestDto)
            const localVarPath = `/api/oauth`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * Oauth2Api - functional programming interface
 * @export
 */
export const Oauth2ApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = Oauth2ApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 당근 Oauth2
         * @param {KarrotCodeRequestDto} requestDto requestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async karrotLoginUsingPOST(requestDto: KarrotCodeRequestDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResponseTokenDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.karrotLoginUsingPOST(requestDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * Oauth2Api - factory interface
 * @export
 */
export const Oauth2ApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = Oauth2ApiFp(configuration)
    return {
        /**
         * 
         * @summary 당근 Oauth2
         * @param {KarrotCodeRequestDto} requestDto requestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        karrotLoginUsingPOST(requestDto: KarrotCodeRequestDto, options?: any): AxiosPromise<BaseResponseTokenDto> {
            return localVarFp.karrotLoginUsingPOST(requestDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Oauth2Api - object-oriented interface
 * @export
 * @class Oauth2Api
 * @extends {BaseAPI}
 */
export class Oauth2Api extends BaseAPI {
    /**
     * 
     * @summary 당근 Oauth2
     * @param {KarrotCodeRequestDto} requestDto requestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Oauth2Api
     */
    public karrotLoginUsingPOST(requestDto: KarrotCodeRequestDto, options?: AxiosRequestConfig) {
        return Oauth2ApiFp(this.configuration).karrotLoginUsingPOST(requestDto, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TownApi - axios parameter creator
 * @export
 */
export const TownApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary RegionId로 Town 정보 조회
         * @param {string} regionId regionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTownInfoUsingGET: async (regionId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'regionId' is not null or undefined
            assertParamExists('getTownInfoUsingGET', 'regionId', regionId)
            const localVarPath = `/api/town`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (regionId !== undefined) {
                localVarQueryParameter['regionId'] = regionId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TownApi - functional programming interface
 * @export
 */
export const TownApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TownApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary RegionId로 Town 정보 조회
         * @param {string} regionId regionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTownInfoUsingGET(regionId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResponseTownDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTownInfoUsingGET(regionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TownApi - factory interface
 * @export
 */
export const TownApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TownApiFp(configuration)
    return {
        /**
         * 
         * @summary RegionId로 Town 정보 조회
         * @param {string} regionId regionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTownInfoUsingGET(regionId: string, options?: any): AxiosPromise<BaseResponseTownDto> {
            return localVarFp.getTownInfoUsingGET(regionId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TownApi - object-oriented interface
 * @export
 * @class TownApi
 * @extends {BaseAPI}
 */
export class TownApi extends BaseAPI {
    /**
     * 
     * @summary RegionId로 Town 정보 조회
     * @param {string} regionId regionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TownApi
     */
    public getTownInfoUsingGET(regionId: string, options?: AxiosRequestConfig) {
        return TownApiFp(this.configuration).getTownInfoUsingGET(regionId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 유저 수 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserCountUsingGET: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/users/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 내 정보 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserInfoUsingGET: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/users/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 유저 수 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserCountUsingGET(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResponselong>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserCountUsingGET(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 내 정보 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserInfoUsingGET(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResponseUserDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserInfoUsingGET(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserApiFp(configuration)
    return {
        /**
         * 
         * @summary 유저 수 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserCountUsingGET(options?: any): AxiosPromise<BaseResponselong> {
            return localVarFp.getUserCountUsingGET(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 내 정보 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserInfoUsingGET(options?: any): AxiosPromise<BaseResponseUserDto> {
            return localVarFp.getUserInfoUsingGET(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * 
     * @summary 유저 수 조회
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getUserCountUsingGET(options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).getUserCountUsingGET(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 내 정보 조회
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getUserInfoUsingGET(options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).getUserInfoUsingGET(options).then((request) => request(this.axios, this.basePath));
    }
}


