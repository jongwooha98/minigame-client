// Generated by dts-bundle-generator v5.9.0

/// <reference types="history" />
/// <reference types="prop-types" />
/// <reference types="react" />
/// <reference types="react-router" />
/// <reference types="scheduler" />

export declare type INavigatorTheme = "Cupertino" | "Android";
export interface INavigatorProps {
	/**
	 * Theme (default: `Android`)
	 */
	theme?: INavigatorTheme;
	/**
	 * Transition animation duration
	 */
	animationDuration?: number;
	/**
	 * Remove built-in `<HashRouter />`
	 * and use your own custom `<Router />`
	 */
	useCustomRouter?: boolean;
	/**
	 * Class name appended to root div element
	 */
	className?: string;
	/**
	 * `aria-label=` property assigned to back button
	 */
	backButtonAriaLabel?: string;
	/**
	 * `aria-label=` property assigned to close button
	 */
	closeButtonAriaLabel?: string;
	/**
	 * When close button clicked
	 */
	onClose?: () => void;
	/**
	 * When navigation depth changed
	 */
	onDepthChange?: (depth: number) => void;
}
export declare const Navigator: React.FC<INavigatorProps>;
export interface IScreenProps {
	/**
	 * URL path
	 */
	path: string;
	/**
	 * Component
	 */
	component?: React.ComponentType;
}
export declare const Screen: React.FC<IScreenProps>;
export interface IScreenHelmetProps {
	/**
	 * title
	 */
	title?: React.ReactNode;
	/**
	 * Append elements in left side
	 * (It'll be displayed in right side of back button)
	 */
	appendLeft?: React.ReactNode;
	/**
	 * Append elements in right side
	 * (It'll be displayed in left side of close button when `closeButtonLocation` is `right`)
	 */
	appendRight?: React.ReactNode;
	/**
	 * Location of close button (default: `left`)
	 */
	closeButtonLocation?: "left" | "right";
	/**
	 * Replace back button
	 */
	customBackButton?: React.ReactNode;
	/**
	 * Replace close button
	 */
	customCloseButton?: React.ReactNode;
	/**
	 * Remove border
	 */
	noBorder?: boolean;
	/**
	 * Disable scroll to top feature (iOS Only)
	 */
	disableScrollToTop?: boolean;
	/**
	 * When top part clicked (iOS Only)
	 */
	onTopClick?: () => void;
}
export declare const ScreenHelmet: React.FC<IScreenHelmetProps>;
export declare function useCurrentScreen(): {
	isTop: boolean;
	isRoot: boolean;
};
export declare function useNavigator(): {
	push: <T = object>(to: string, options?: {
		/**
		 * Bottom to top animation (iOS only)
		 */
		present?: boolean | undefined;
	} | undefined) => Promise<T | null>;
	replace: (to: string, options?: {
		/**
		 * Animate when replaced
		 */
		animate?: boolean | undefined;
	} | undefined) => void;
	pop: (depth?: any) => {
		send: <T_1 = object>(data: T_1) => void;
	};
};
export declare function useParams<T extends {
	[key in keyof T]: string;
} = {}>(): Partial<T>;
export declare function useQueryParams<T extends {
	[key in keyof T]: string;
} = {}>(options?: {
	ignoreNestedRoutes?: boolean;
}): Partial<T>;
export { useLocation, useRouteMatch } from "react-router-dom";

export {};
