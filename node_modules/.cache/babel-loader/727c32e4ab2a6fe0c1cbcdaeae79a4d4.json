{"ast":null,"code":"function getVarName(variable) {\n  const matches = variable.match(/^var\\((.*)\\)$/);\n\n  if (matches) {\n    return matches[1];\n  }\n\n  return variable;\n}\n\nfunction get(obj, path) {\n  let result = obj;\n\n  for (const key of path) {\n    if (!(key in result)) {\n      throw new Error(`Path ${path.join(' -> ')} does not exist in object`);\n    }\n\n    result = result[key];\n  }\n\n  return result;\n}\n\nfunction walkObject(obj, fn, path = []) {\n  const clone = obj.constructor();\n\n  for (let key in obj) {\n    const value = obj[key];\n    const currentPath = [...path, key];\n\n    if (typeof value === 'string' || typeof value === 'number' || value == null) {\n      clone[key] = fn(value, currentPath);\n    } else if (typeof value === 'object' && !Array.isArray(value)) {\n      clone[key] = walkObject(value, fn, currentPath);\n    } else {\n      console.warn(`Skipping invalid key \"${currentPath.join('.')}\". Should be a string, number, null or object. Received: \"${Array.isArray(value) ? 'Array' : typeof value}\"`);\n    }\n  }\n\n  return clone;\n}\n\nexport { get, getVarName, walkObject };","map":{"version":3,"sources":["/Users/jason.ha/Desktop/minigame/raise-the-karrot/node_modules/@vanilla-extract/private/dist/vanilla-extract-private.esm.js"],"names":["getVarName","variable","matches","match","get","obj","path","result","key","Error","join","walkObject","fn","clone","constructor","value","currentPath","Array","isArray","console","warn"],"mappings":"AAAA,SAASA,UAAT,CAAoBC,QAApB,EAA8B;AAC5B,QAAMC,OAAO,GAAGD,QAAQ,CAACE,KAAT,CAAe,eAAf,CAAhB;;AAEA,MAAID,OAAJ,EAAa;AACX,WAAOA,OAAO,CAAC,CAAD,CAAd;AACD;;AAED,SAAOD,QAAP;AACD;;AAED,SAASG,GAAT,CAAaC,GAAb,EAAkBC,IAAlB,EAAwB;AACtB,MAAIC,MAAM,GAAGF,GAAb;;AAEA,OAAK,MAAMG,GAAX,IAAkBF,IAAlB,EAAwB;AACtB,QAAI,EAAEE,GAAG,IAAID,MAAT,CAAJ,EAAsB;AACpB,YAAM,IAAIE,KAAJ,CAAW,QAAOH,IAAI,CAACI,IAAL,CAAU,MAAV,CAAkB,2BAApC,CAAN;AACD;;AAEDH,IAAAA,MAAM,GAAGA,MAAM,CAACC,GAAD,CAAf;AACD;;AAED,SAAOD,MAAP;AACD;;AAED,SAASI,UAAT,CAAoBN,GAApB,EAAyBO,EAAzB,EAA6BN,IAAI,GAAG,EAApC,EAAwC;AACtC,QAAMO,KAAK,GAAGR,GAAG,CAACS,WAAJ,EAAd;;AAEA,OAAK,IAAIN,GAAT,IAAgBH,GAAhB,EAAqB;AACnB,UAAMU,KAAK,GAAGV,GAAG,CAACG,GAAD,CAAjB;AACA,UAAMQ,WAAW,GAAG,CAAC,GAAGV,IAAJ,EAAUE,GAAV,CAApB;;AAEA,QAAI,OAAOO,KAAP,KAAiB,QAAjB,IAA6B,OAAOA,KAAP,KAAiB,QAA9C,IAA0DA,KAAK,IAAI,IAAvE,EAA6E;AAC3EF,MAAAA,KAAK,CAACL,GAAD,CAAL,GAAaI,EAAE,CAACG,KAAD,EAAQC,WAAR,CAAf;AACD,KAFD,MAEO,IAAI,OAAOD,KAAP,KAAiB,QAAjB,IAA6B,CAACE,KAAK,CAACC,OAAN,CAAcH,KAAd,CAAlC,EAAwD;AAC7DF,MAAAA,KAAK,CAACL,GAAD,CAAL,GAAaG,UAAU,CAACI,KAAD,EAAQH,EAAR,EAAYI,WAAZ,CAAvB;AACD,KAFM,MAEA;AACLG,MAAAA,OAAO,CAACC,IAAR,CAAc,yBAAwBJ,WAAW,CAACN,IAAZ,CAAiB,GAAjB,CAAsB,6DAA4DO,KAAK,CAACC,OAAN,CAAcH,KAAd,IAAuB,OAAvB,GAAiC,OAAOA,KAAM,GAAtK;AACD;AACF;;AAED,SAAOF,KAAP;AACD;;AAED,SAAST,GAAT,EAAcJ,UAAd,EAA0BW,UAA1B","sourcesContent":["function getVarName(variable) {\n  const matches = variable.match(/^var\\((.*)\\)$/);\n\n  if (matches) {\n    return matches[1];\n  }\n\n  return variable;\n}\n\nfunction get(obj, path) {\n  let result = obj;\n\n  for (const key of path) {\n    if (!(key in result)) {\n      throw new Error(`Path ${path.join(' -> ')} does not exist in object`);\n    }\n\n    result = result[key];\n  }\n\n  return result;\n}\n\nfunction walkObject(obj, fn, path = []) {\n  const clone = obj.constructor();\n\n  for (let key in obj) {\n    const value = obj[key];\n    const currentPath = [...path, key];\n\n    if (typeof value === 'string' || typeof value === 'number' || value == null) {\n      clone[key] = fn(value, currentPath);\n    } else if (typeof value === 'object' && !Array.isArray(value)) {\n      clone[key] = walkObject(value, fn, currentPath);\n    } else {\n      console.warn(`Skipping invalid key \"${currentPath.join('.')}\". Should be a string, number, null or object. Received: \"${Array.isArray(value) ? 'Array' : typeof value}\"`);\n    }\n  }\n\n  return clone;\n}\n\nexport { get, getVarName, walkObject };\n"]},"metadata":{},"sourceType":"module"}