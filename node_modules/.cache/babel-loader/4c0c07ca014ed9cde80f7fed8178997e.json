{"ast":null,"code":"import { walkObject, get, getVarName } from '@vanilla-extract/private';\n\nfunction assignInlineVars(varsOrContract, tokens) {\n  const styles = {};\n\n  if (typeof tokens === 'object') {\n    const contract = varsOrContract;\n    walkObject(tokens, (value, path) => {\n      const varName = get(contract, path);\n      styles[getVarName(varName)] = String(value);\n    });\n  } else {\n    const vars = varsOrContract;\n\n    for (const varName in vars) {\n      styles[getVarName(varName)] = vars[varName];\n    }\n  }\n\n  Object.defineProperty(styles, 'toString', {\n    value: function () {\n      return Object.keys(this).map(key => `${key}:${this[key]}`).join(';');\n    },\n    writable: false\n  });\n  return styles;\n}\n\nfunction setVar(element, variable, value) {\n  element.style.setProperty(getVarName(variable), value);\n}\n\nfunction setElementVars(element, varsOrContract, tokens) {\n  if (typeof tokens === 'object') {\n    const contract = varsOrContract;\n    walkObject(tokens, (value, path) => {\n      setVar(element, get(contract, path), String(value));\n    });\n  } else {\n    const vars = varsOrContract;\n\n    for (const varName in vars) {\n      setVar(element, varName, vars[varName]);\n    }\n  }\n}\n\nexport { assignInlineVars, setElementVars };","map":{"version":3,"sources":["/Users/jason.ha/Desktop/minigame/raise-the-karrot/node_modules/@vanilla-extract/dynamic/dist/vanilla-extract-dynamic.esm.js"],"names":["walkObject","get","getVarName","assignInlineVars","varsOrContract","tokens","styles","contract","value","path","varName","String","vars","Object","defineProperty","keys","map","key","join","writable","setVar","element","variable","style","setProperty","setElementVars"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,GAArB,EAA0BC,UAA1B,QAA4C,0BAA5C;;AAEA,SAASC,gBAAT,CAA0BC,cAA1B,EAA0CC,MAA1C,EAAkD;AAChD,QAAMC,MAAM,GAAG,EAAf;;AAEA,MAAI,OAAOD,MAAP,KAAkB,QAAtB,EAAgC;AAC9B,UAAME,QAAQ,GAAGH,cAAjB;AACAJ,IAAAA,UAAU,CAACK,MAAD,EAAS,CAACG,KAAD,EAAQC,IAAR,KAAiB;AAClC,YAAMC,OAAO,GAAGT,GAAG,CAACM,QAAD,EAAWE,IAAX,CAAnB;AACAH,MAAAA,MAAM,CAACJ,UAAU,CAACQ,OAAD,CAAX,CAAN,GAA8BC,MAAM,CAACH,KAAD,CAApC;AACD,KAHS,CAAV;AAID,GAND,MAMO;AACL,UAAMI,IAAI,GAAGR,cAAb;;AAEA,SAAK,MAAMM,OAAX,IAAsBE,IAAtB,EAA4B;AAC1BN,MAAAA,MAAM,CAACJ,UAAU,CAACQ,OAAD,CAAX,CAAN,GAA8BE,IAAI,CAACF,OAAD,CAAlC;AACD;AACF;;AAEDG,EAAAA,MAAM,CAACC,cAAP,CAAsBR,MAAtB,EAA8B,UAA9B,EAA0C;AACxCE,IAAAA,KAAK,EAAE,YAAY;AACjB,aAAOK,MAAM,CAACE,IAAP,CAAY,IAAZ,EAAkBC,GAAlB,CAAsBC,GAAG,IAAK,GAAEA,GAAI,IAAG,KAAKA,GAAL,CAAU,EAAjD,EAAoDC,IAApD,CAAyD,GAAzD,CAAP;AACD,KAHuC;AAIxCC,IAAAA,QAAQ,EAAE;AAJ8B,GAA1C;AAMA,SAAOb,MAAP;AACD;;AAED,SAASc,MAAT,CAAgBC,OAAhB,EAAyBC,QAAzB,EAAmCd,KAAnC,EAA0C;AACxCa,EAAAA,OAAO,CAACE,KAAR,CAAcC,WAAd,CAA0BtB,UAAU,CAACoB,QAAD,CAApC,EAAgDd,KAAhD;AACD;;AAED,SAASiB,cAAT,CAAwBJ,OAAxB,EAAiCjB,cAAjC,EAAiDC,MAAjD,EAAyD;AACvD,MAAI,OAAOA,MAAP,KAAkB,QAAtB,EAAgC;AAC9B,UAAME,QAAQ,GAAGH,cAAjB;AACAJ,IAAAA,UAAU,CAACK,MAAD,EAAS,CAACG,KAAD,EAAQC,IAAR,KAAiB;AAClCW,MAAAA,MAAM,CAACC,OAAD,EAAUpB,GAAG,CAACM,QAAD,EAAWE,IAAX,CAAb,EAA+BE,MAAM,CAACH,KAAD,CAArC,CAAN;AACD,KAFS,CAAV;AAGD,GALD,MAKO;AACL,UAAMI,IAAI,GAAGR,cAAb;;AAEA,SAAK,MAAMM,OAAX,IAAsBE,IAAtB,EAA4B;AAC1BQ,MAAAA,MAAM,CAACC,OAAD,EAAUX,OAAV,EAAmBE,IAAI,CAACF,OAAD,CAAvB,CAAN;AACD;AACF;AACF;;AAED,SAASP,gBAAT,EAA2BsB,cAA3B","sourcesContent":["import { walkObject, get, getVarName } from '@vanilla-extract/private';\n\nfunction assignInlineVars(varsOrContract, tokens) {\n  const styles = {};\n\n  if (typeof tokens === 'object') {\n    const contract = varsOrContract;\n    walkObject(tokens, (value, path) => {\n      const varName = get(contract, path);\n      styles[getVarName(varName)] = String(value);\n    });\n  } else {\n    const vars = varsOrContract;\n\n    for (const varName in vars) {\n      styles[getVarName(varName)] = vars[varName];\n    }\n  }\n\n  Object.defineProperty(styles, 'toString', {\n    value: function () {\n      return Object.keys(this).map(key => `${key}:${this[key]}`).join(';');\n    },\n    writable: false\n  });\n  return styles;\n}\n\nfunction setVar(element, variable, value) {\n  element.style.setProperty(getVarName(variable), value);\n}\n\nfunction setElementVars(element, varsOrContract, tokens) {\n  if (typeof tokens === 'object') {\n    const contract = varsOrContract;\n    walkObject(tokens, (value, path) => {\n      setVar(element, get(contract, path), String(value));\n    });\n  } else {\n    const vars = varsOrContract;\n\n    for (const varName in vars) {\n      setVar(element, varName, vars[varName]);\n    }\n  }\n}\n\nexport { assignInlineVars, setElementVars };\n"]},"metadata":{},"sourceType":"module"}